{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCP1CK,EAAU,aA2BD,EAxBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GAEpBI,EAAc,CAChBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEb,OAAOK,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAe5C,EAVA,SAACO,GAEZ,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCX9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKlB,UAAU,QAAf,SACKkB,KCHPC,EAAS,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,2GA4FGC,EArFH,SAACC,GAAW,IAAD,EAEOC,mBAAS,IAFhB,mBAEZC,EAFY,KAELC,EAFK,OAGWF,mBAAS,iBAHpB,mBAGZG,EAHY,KAGHC,EAHG,OAIWJ,oBAAS,GAJpB,mBAIZK,EAJY,KAIHC,EAJG,OAKqBN,mBAAS,MAL9B,mBAKZO,EALY,KAKEC,EALF,KAOnBC,qBAAU,WACNC,IAEK1B,MAAK,SAAA2B,GACFT,EAASS,QAElB,IAGH,IAwCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA3C,GAAI,OAAIA,EAAKG,aAEhE,OACI,gCACI,uCACA,cAAC,EAAD,CAAcmB,QAASe,IACvB,8BACI,yBAAQ/B,QAAS,kBAAM8B,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKO,EAAYE,KAAI,SAAA5C,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAxDX,SAACW,GACxB,IAAMZ,EAAO+B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqC,EACY5B,EAAImC,GACXjC,MAAK,SAAAkC,GACFhB,EAASD,EAAMa,KAAI,SAAA5C,GAAI,OAAIA,EAAKY,KAAOA,EAAKZ,EAAOgD,SACpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACFtC,EAAKK,QADH,sCAGf8C,YAAW,WACPb,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAElC,KAAOA,SAyCJwC,CAAmBpD,EAAKY,MAF3CZ,EAAKY,SAMtB,uBAAMyC,SAzCE,SAACC,GACbA,EAAEC,iBACF,IAAMC,EAAa,CACfnD,QAAS4B,EACTpB,MAAM,IAAI4C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG/BpB,EACYgB,GACP1C,MAAK,SAAAkC,GACFhB,EAASD,EAAMd,OAAO+B,IACtBd,EAAW,QA6Bf,UACI,uBAAO2B,MAAO5B,EAAS6B,SA1BV,SAACR,GACtBS,QAAQC,IAAIV,EAAEW,OAAOJ,OACrB3B,EAAWoB,EAAEW,OAAOJ,UAyBZ,wBAAQK,KAAK,SAAb,qBAEJ,cAAC,EAAD,Q,MChGZC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9ff8250e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Note;","import axios from 'axios';\r\nconst baseUrl = \"/api/notes\";\r\n//const baseUrl = \"https://frozen-river-71933.herokuapp.com/api/notes\";\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n      return request.then(response => response.data.concat(nonExisting))\r\n\r\n    // return request.then(response => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport noteService from './services/notes';\r\nimport Notification from \"./components/Notification\";\r\n\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: \"green\",\r\n        fontStyle: \"italic\",\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br/>\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst App = (props) => {\r\n\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState(\"a new note...\");\r\n    const [showAll, setShowAll] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            });\r\n    }, []);\r\n\r\n\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find(n => n.id === id);\r\n        const changedNote = { ...note, important: !note.important };\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            }).catch(error => {\r\n                setErrorMessage(\r\n                    `Note \"${note.content}\" was already removed from server`\r\n                );\r\n                setTimeout(() => {\r\n                    setErrorMessage(null);\r\n                }, 5000);\r\n                setNotes(notes.filter(n => n.id !== id));\r\n            });\r\n    };\r\n\r\n    const addNote = (e) => {\r\n        e.preventDefault();\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n        };\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote));\r\n                setNewNote(\"\");\r\n            });\r\n    };\r\n\r\n    const handleNoteChange = (e) => {\r\n        console.log(e.target.value);\r\n        setNewNote(e.target.value);\r\n    };\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? \"important\" : \"all\"}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportanceOf(note.id)}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\";\nimport \"./index.css\";\n\n\n\nReactDOM.render( <App />, document.getElementById('root'))\n\n\n\n\n\n\n"],"sourceRoot":""}